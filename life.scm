;;; life.scm -- Conway's Game of Life in Scheme (at least R5RS and later)

(define n 40)
(define m 80)
(define g 1000)

(define (display-board b)
  (do ((i 0 (+ i 1)))
      ((= i n))
    (do ((j 0 (+ j 1)))
        ((= j m))
      (write-char (if (positive? (vector-ref (vector-ref b i) j)) #\* #\space)))
    (newline)))

(define (main)
  (let ((b (make-vector n)))
    (do ((i 0 (+ i 1))) ((= i n)) (vector-set! b i (make-vector m 0)))
    ;; initialization
    (vector-set! (vector-ref b 19) 41 1)
    (vector-set! (vector-ref b 20) 40 1)
    (vector-set! (vector-ref b 21) 40 1)
    (vector-set! (vector-ref b 22) 40 1)
    (vector-set! (vector-ref b 22) 41 1)
    (vector-set! (vector-ref b 22) 42 1)
    (vector-set! (vector-ref b 22) 43 1)
    (vector-set! (vector-ref b 19) 44 1)
    ;; end of initialization
    (begin (display "Before:") (newline) (display-board b))
    (let ((nextb (make-vector n)) (nm1 (- n 1)) (mm1 (- m 1)))
       (do ((i 0 (+ i 1))) ((= i n)) (vector-set! nextb i (make-vector m 0)))
       (do ((k 0 (+ k 1)))
           ((= k g))
         (do ((i 0 (+ i 1)))
             ((= i n))
           (let ((up (if (= i 0) nm1 (- i 1))) (down (if (= i nm1) 0 (+ i 1))))
             (do ((j 0 (+ j 1)))
                 ((= j m))
               (let ((left (if (= j 0) mm1 (- j 1))) (right (if (= j mm1) 0 (+ j 1))))
                 (let ((count (+
                               (vector-ref (vector-ref b up)   left)
                               (vector-ref (vector-ref b up)   j)
                               (vector-ref (vector-ref b up)   right)
                               (vector-ref (vector-ref b i)    right)
                               (vector-ref (vector-ref b down) right)
                               (vector-ref (vector-ref b down) j)
                               (vector-ref (vector-ref b down) left)
                               (vector-ref (vector-ref b i)    left))))
                   (vector-set! (vector-ref nextb i)
                                j
                                (cond ((= count 2) (vector-ref (vector-ref b i) j)) ((= count 3) 1) (else 0))))))))
         (let ((tmp b)) (set! b nextb) (set! nextb tmp))))
    (begin (display "After ") (display g) (display " generations:") (newline) (display-board b))))

(main)
